affinity: {}
agent:
  annotations: {}
  args: ''
  command: ''
  containerExtraEnvVars: []
  containerSecurityContext:
    enabled: false
    privileged: false
    runAsGroup: ''
    runAsUser: ''
    seLinuxOptions: {}
  enabled: false
  extraAgentTemplate: {}
  extraTemplates: []
  image:
    debug: false
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/jenkins-agent
    tag: 0.3261.0-debian-12-r2
  podExtraEnvVars: []
  podLabels: {}
  resources: {}
  resourcesPreset: small
  sidecars: []
  templateLabel: kubernetes-agent
agentListenerService:
  annotations: {}
  clusterIP: ''
  enabled: true
  externalTrafficPolicy: Cluster
  extraPorts: []
  loadBalancerIP: ''
  loadBalancerSourceRanges: []
  nodePorts:
    agentListener: ''
  ports:
    agentListener: 50000
  sessionAffinity: None
  sessionAffinityConfig: {}
  type: ClusterIP
args: []
automountServiceAccountToken: true
clusterDomain: cluster.local
command: []
commonAnnotations: {}
commonLabels: {}
configAsCode:
  authorizationStrategy: {}
  autoReload:
    args: []
    command: []
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    enabled: true
    extraEnvVars: []
    extraEnvVarsCM: ''
    extraEnvVarsSecret: ''
    extraVolumeMounts: []
    initialDelay: 360
    interval: 10
    reqRetries: 12
    resources: {}
    resourcesPreset: none
  enabled: false
  existingConfigmap: ''
  extraClouds: []
  extraConfig: {}
  extraConfigFiles: {}
  extraJenkins: {}
  extraKubernetes: {}
  security: {}
  securityRealm: {}
containerPorts:
  agentListener: 50000
  http: 8080
  https: 8443
containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  enabled: true
  privileged: false
  readOnlyRootFilesystem: true
  runAsGroup: 1001
  runAsNonRoot: true
  runAsUser: 1001
  seLinuxOptions: {}
  seccompProfile:
    type: RuntimeDefault
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
diagnosticMode:
  args:
  - infinity
  command:
  - sleep
  enabled: false
disableInitialization: 'no'
extraDeploy: []
extraEnvVars: []
extraEnvVarsCM: ''
extraEnvVarsSecret: ''
extraPlugins: []
extraVolumeMounts: []
extraVolumes: []
fullnameOverride: ''
global:
  compatibility:
    openshift:
      adaptSecurityContext: auto
  defaultStorageClass: ''
  imagePullSecrets: []
  imageRegistry: ''
  storageClass: ''
hostAliases: []
image:
  debug: false
  digest: ''
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/jenkins
  tag: 2.462.3-debian-12-r1
ingress:
  annotations: {}
  apiVersion: ''
  enabled: false
  extraHosts: []
  extraPaths: []
  extraRules: []
  extraTls: []
  hostname: jenkins.local
  ingressClassName: ''
  path: /
  pathType: ImplementationSpecific
  secrets: []
  selfSigned: false
  tls: false
initContainers: []
initHookScripts: {}
initHookScriptsCM: ''
initHookScriptsSecret: ''
initScripts: {}
initScriptsCM: ''
initScriptsSecret: ''
javaOpts: []
jenkinsHome: /bitnami/jenkins/home
jenkinsHost: ''
jenkinsPassword: admin2024
jenkinsUser: admin
kubeVersion: ''
latestPlugins: true
latestSpecifiedPlugins: false
lifecycleHooks: {}
livenessProbe:
  enabled: true
  failureThreshold: 6
  initialDelaySeconds: 180
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
nameOverride: ''
networkPolicy:
  allowExternal: true
  allowExternalEgress: true
  enabled: true
  extraEgress: []
  extraIngress: []
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}
  kubeAPIServerPorts:
  - 443
  - 6443
  - 8443
nodeAffinityPreset:
  key: ''
  type: ''
  values: []
nodeSelector: {}
overridePaths: ''
overridePlugins: false
pdb:
  create: true
  maxUnavailable: ''
  minAvailable: ''
persistence:
  accessModes:
  - ReadWriteOnce
  enabled: true
  size: 10Gi
  storageClass: ''
#plugins: []
podAffinityPreset: ''
podAnnotations: {}
podAntiAffinityPreset: soft
podLabels: {}
podSecurityContext:
  enabled: true
  fsGroup: 1001
  fsGroupChangePolicy: Always
  supplementalGroups: []
  sysctls: []
priorityClassName: ''
rbac:
  create: true
  rules: []
readinessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 30
  periodSeconds: 5
  successThreshold: 1
  timeoutSeconds: 3
replicaCount: 1
resources:
  limits:
    cpu: '1'
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 1Gi
resourcesPreset: medium
schedulerName: ''
service:
  nodePorts:
    http: 32001
    https: 32002
  ports:
    http: 8080
    https: 8443
  type: NodePort
serviceAccount:
  annotations: {}
  automountServiceAccountToken: false
  create: true
  name: ''
sidecars: []
skipImagePlugins: false
startupProbe:
  enabled: false
  failureThreshold: 6
  initialDelaySeconds: 180
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
tls:
  autoGenerated: false
  existingSecret: ''
  password: ''
  passwordsSecret: ''
  resources: {}
  resourcesPreset: nano
  usePemCerts: false
tolerations: []
topologySpreadConstraints: []
updateStrategy:
  type: RollingUpdate
volumePermissions:
  enabled: false
  image:
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/os-shell
    tag: 12-debian-12-r31
  resources: {}
  resourcesPreset: nano
  securityContext:
    runAsUser: 0
    seLinuxOptions: {}
